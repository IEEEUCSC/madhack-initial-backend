openapi: 3.0.0
servers: [
  {
    "url": "http://localhost:3001/api",
    "description": "Local Server"
  },
  {
    "url": "https://argo.madhack.ucscieee.com/api",
    "description": "MADHack Server"
  }
]
info:
  description: MADHack Initial Round API Documentation
  version: "1.0.0"
  title: MADHack ARGO API
  contact:
    email: ucscieee@gmail.com
tags:
  - name: auth
    description: User authentication
  - name: user
    description: User management
  - name: todo
    description: Todo management
  - name: category
    description: Category management
paths:
  /:
    get:
      security:
        - ApiKeyAuth: [ ]
      description: Welcome message
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Welcome to the MADHack ARGO API
  /auth/login:
    post:
      tags:
        - auth
      summary: provides user login functionality
      operationId: loginUser
      description: Logs in a user and returns a JWT
      security:
        - ApiKeyAuth: [ ]
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: 123456
        description: User auth details
  /auth/register:
    post:
      tags:
        - auth
      summary: provides user register functionality
      operationId: registerUser
      description: Registers a user
      security:
        - ApiKeyAuth: [ ]
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUser'
        description: User auth details
  /user:
    get:
      security:
        - ApiKeyAuth: [ ]
        - BearerAuth: [ ]
      tags:
        - user
      summary: retrieves user details
      operationId: getUser
      description: Gets details of logged in user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    put:
      security:
        - ApiKeyAuth: [ ]
        - BearerAuth: [ ]
      tags:
        - user
      summary: updates user details
      operationId: updateUser
      description: Updates details of logged in user
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUser'
        description: User details
  /user/upload-avatar:
    post:
      security:
        - ApiKeyAuth: [ ]
        - BearerAuth: [ ]
      tags:
        - user
      summary: uploads user avatars
      operationId: uploadAvatar
      description: Uploads images to server with multipart form dst
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
  /todo:
    get:
      security:
        - ApiKeyAuth: [ ]
        - BearerAuth: [ ]
      tags:
        - todo
      summary: retrieves todo list
      operationId: getTodoList
      description: Gets todo list of logged in user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    post:
      security:
        - ApiKeyAuth: [ ]
        - BearerAuth: [ ]
      tags:
        - todo
      summary: creates a todo
      operationId: createTodo
      description: Creates a todo
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
        description: Todo details
  /category:
    get:
      security:
        - ApiKeyAuth: [ ]
        - BearerAuth: [ ]
      tags:
        - category
      summary: retrieves category list
      operationId: getCategoryList
      description: Gets category list of logged in user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

components:
  schemas:
    AppUser:
      type: object
      required:
        - userId
        - firstName
        - lastName
        - email
        - password
        - contactNo
      properties:
        userId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: 'johndoe@example.com'
        password:
          type: string
          example: 123456
        contactNo:
          type: string
          example: '0712345678'
      description: A user of the mobile application
    Category:
      type: object
      required:
        - categoryId
        - categoryName
      properties:
        categoryId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        categoryName:
          type: string
          example: 'Work'
    Todo:
      type: object
      required:
        - todoId
        - title
        - notes
        - createdDt
        - dueDt
        - isCompleted
        - lastModifiedAt
        - userId
        - categoryId
      properties:
        todoId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        title:
          type: string
          example: 'Buy Milk'
        notes:
          type: string
          example: 'Buy 2L of milk'
        createdDt:
          type: string
          format: date-time
          example: '2023-02-25T10:00:00Z'
        dueDt:
          type: string
          format: date-time
          example: '2023-02-25T10:00:00Z'
        isCompleted:
          type: boolean
          example: false
        lastModifiedAt:
          type: string
          format: date-time
          example: '2023-02-25T10:00:00Z'
        userId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        categoryId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f085
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

security:
  - BearerAuth: [ ]
  - ApiKeyAuth: [ ]